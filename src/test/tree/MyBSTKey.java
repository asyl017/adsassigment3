/**
 * Class for keys used in a Binary Search Tree (BST).
 * Implements the Comparable interface to allow comparison between keys.
 */
package test.tree;

public class MyBSTKey implements Comparable<MyBSTKey> {
    private int primaryKey;

    /**
     * Constructs a new instance of MyBSTKey with the specified primary key.
     *
     * @param primaryKey the key value used for comparison
     */
    public MyBSTKey(int primaryKey) {
        this.primaryKey = primaryKey;
    }

    /**
     * Computes the hash code for this object.
     * The hash code is generated by performing a bitwise exclusive OR operation
     * on the primary key with the hexadecimal constant 0xaaaaaaaa after performing
     * a logical right shift by one bit.
     *
     * @return the computed hash code
     */
    @Override
    public int hashCode() {
        int temp = primaryKey;
        temp >>>= 1;
        return temp ^ 0xaaaaaaaa;
    }

    /**
     * Compares this MyBSTKey object with another MyBSTKey for order.
     *
     * @param o the MyBSTKey to be compared
     * @return a negative integer, zero, or a positive integer as this object is less than,
     * equal to, or greater than the specified object
     */
    @Override
    public int compareTo(MyBSTKey o) {
        return Integer.compare(this.primaryKey, o.primaryKey);
    }
}
